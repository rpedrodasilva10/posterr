swagger: '2.0'

info:
  title: Posterr Rest API
  description: Provide operations for Posterr applications envolving Posts domain
  version: 1.0.0
  contact:
    name: 'Renan Pedro da Silva'
    email: 'rpedrodasilva10@gmail.com'

host: springboot-clients-api.herokuapp.com

basePath: /api/v1
schemes:
  - https
tags:
  - name: Public
    description: Public operations

parameters:
  post:
    in: body
    name: post
    required: true
    schema:
      $ref: '#/definitions/CreatePostRequest'
    description: 'Payload to create a post'
  skip:
    in: query
    name: skip
    required: false
    type: integer
    description: 'Rows to skip from the result'
  limit:
    in: query
    name: limit
    required: false
    type: integer
    default: 10
    description: 'Rows to limit the result (the default value is 10)'
  startDate:
    in: query
    name: startDate
    required: false
    type: string
    format: date
    description: 'Start date to filter posts'
  endDate:
    in: query
    name: endDate
    required: false
    type: string
    format: date
    description: 'End date to filter posts'
  userId:
    in: query
    name: userId
    required: false
    type: string
    description: 'User id to search posts'


responses:
  200-Ok:
    description: 'Successful Request'
    schema:
      $ref: '#/definitions/Post'
  200-OkList:
    description: 'Successful Request'
    schema:
      $ref: '#/definitions/PostList'
  201-Created:
    description: 'Created'
    schema:
      $ref: '#/definitions/CreatedPost'
  204-NoContent:
    description: 'No content'
  400-BadRequest:
    description: 'Bad request'
    schema:
      $ref: '#/definitions/ApiError'
  401-Unauthorized:
    description: 'Unauthorized'
    schema:
      $ref: '#/definitions/ApiError'
  403-Forbidden:
    description: 'Forbidden'
    schema:
      $ref: '#/definitions/ApiError'
  404-NotFound:
    description: 'Not found'
    schema:
      $ref: '#/definitions/ApiError'
  405-DataInvalid:
    description: 'Data input not supplied or invalid'
    schema:
      $ref: '#/definitions/ApiError'
  453-BusinessError:
    description: 'Business Exception'
    schema:
      $ref: '#/definitions/BusinessError'
  500-Exception:
    description: 'Internal Server Error'
    schema:
      $ref: '#/definitions/ApiError'

paths:
  /posts:
    post:
      tags:
        - Public
      summary: Create a new post
      description: Save a new post in the database by filling all the required fields
      operationId: createPost
      produces:
        - application/json
      consumes:
        - application/json

      parameters:
        - $ref: '#/parameters/post'
      responses:
        201:
          $ref: '#/responses/201-Created'
        400:
          $ref: '#/responses/400-BadRequest'
        401:
          $ref: '#/responses/401-Unauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        405:
          $ref: '#/responses/405-DataInvalid'
        500:
          $ref: '#/responses/500-Exception'
    get:
      tags:
        - Public
      summary: Get posts
      description: Get posts from the database given parameters
      operationId: getPosts
      produces:
        - application/json
      consumes:
        - application/json

      parameters:
        - $ref: '#/parameters/skip'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/startDate'
        - $ref: '#/parameters/endDate'
        - $ref: '#/parameters/userId'

      responses:
        201:
          $ref: '#/responses/200-OkList'
        400:
          $ref: '#/responses/400-BadRequest'
        401:
          $ref: '#/responses/401-Unauthorized'
        403:
          $ref: '#/responses/403-Forbidden'
        405:
          $ref: '#/responses/405-DataInvalid'
        500:
          $ref: '#/responses/500-Exception'


definitions:
  ApiError:
    type: object
    description: 'Error API responses'
    properties:
      code:
        type: integer
        format: int32
        description: 'Error ID'
      message:
        type: string
        description: 'Error Description'
      description:
        type: string
        description: 'Error Details'
      errors:
        type: array
        description: 'Membership Erros'
        items:
          $ref: '#/definitions/Error'

  BusinessError:
    type: object
    title: 'BusinessError'
    description: 'Error API response'
    properties:
      code:
        type: integer
        format: int32
        description: 'Error ID'
      message:
        type: string
        description: 'Error Details'
      description:
        type: string
        description: 'Error Details'
      errors:
        type: array
        description: 'Membership Errors'
        items:
          $ref: '#/definitions/Error'

  Error:
    type: object
    description: 'Error Entity'
    properties:
      code:
        type: string
        description: 'Error ID'
      message:
        type: string
        description: 'Error Description'
      nativeMessage:
        type: string
        description: 'Native Error description'

  CreatedPost:
    type: object
    title: Created post
    description: 'Response object for Post creation'
    properties:
      id:
        type: integer
        format: int64
        description: 'Post unique identifier'
        example: 1

  PostList:
    type: array
    title: PostList
    description: 'Object to describe a list composed by multiple instances of Post entity'
    items:
      $ref: '#/definitions/GetPostsResponse'

  User:
    type: object
    title: User
    description: 'Object to describe a single User entity'
    properties:
      id:
        type: integer
        description: 'User unique identifier'
        example: 1
      username:
        type: string
        description: 'User unique name'
        example: 'rpsilva10'
      joinedAt:
        type: string
        description: 'Date and time of creation'
        format: date-time
      postCount:
        type: number
        description: 'Total of posts for this user'
        format: int64
        example: 9592

  CreatePostRequest:
    type: object
    title: CreatePostObject
    description: 'Object to create a post'
    properties:
      content:
        type: string
        description: 'Post text content'
        maxLength: 777
        example: 'Lorem ipsulum'
      userId:
        type: integer
        format: int64
        description: 'Unique identifier from the user that is creating the post'
        example: 127
      type:
        $ref: '#/definitions/PostType'
      originPostId:
        type: integer
        format: int64
        description: 'Unique identifier from the post that is being quoted or reposted'
        example: 5
      quoteMessage:
        type: string
        description: 'Quote post message'
        example: 'Swagger is awesome'

    required:
      - content
      - userId
      - type

  PostType:
    type: string
    title: PostType
    description: 'Post type'
    enum: ['ORIGINAL', 'REPOST', 'QUOTE']


  GetPostsResponse:
    type: object
    title: GetPostsResponse
    description: 'Object to describe a list of posts being returned'
    properties:
      originPost:
        $ref: '#/definitions/Post'
    allOf:
      - $ref: '#/definitions/Post'
    required:
      - type

  Post:
    type: object
    title: Post
    description: 'Object to describe a single Post entity'
    properties:
      id:
        type: integer
        description: 'Post unique identifier'
        example: 1
      content:
        type: string
        description: 'Post text content'
        maxLength: 777
        example: 'Lorem ipsulum'
      user:
        allOf:
          - $ref: '#/definitions/User'
      createdAt:
        type: string
        description: 'Date and time of creation'
        format: date-time
      type:
        $ref: '#/definitions/PostType'


    required:
      - id
      - content
      - user
      - createdAt
